from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram import Router
from aiogram.fsm.context import FSMContext

from keyboard.keyboard import *
from database.crud import *
from keyboard.keyboard_builder import make_row_keyboards

router = Router()


async def handle_subscription_check(message: Message, groups):
    keyboard = []
    not_subscribed_channels = []

    list_admins = get_admin_list()
    if message.from_user.id in list_admins:
        await message.answer('üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! üåü –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üòä \n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞ –∏ —É–¥–æ–±–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /help. üìö\n\n–ê –ø–æ–∫–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∏ —É–±–µ–¥–∏—Ç—å—Å—è, –∫–∞–∫ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –≤–∞—à—É –∂–∏–∑–Ω—å –ø—Ä–æ—â–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ! üöÄ\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! üí¨‚ú®',
                             reply_markup=make_row_keyboards(keyboard_main_admin))
        return

    for i in groups:
        member = await message.bot.get_chat_member(chat_id=f'@{i["username"]}', user_id=message.from_user.id)
        if member.status not in ['member', 'creator', 'administrator']:
            keyboard.append([InlineKeyboardButton(text=f'{i["name"]}', url=f'https://t.me/{i["username"]}')])
            not_subscribed_channels.append(i)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    # if not_subscribed_channels:
    #     keyboard.append([InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_subscribes')])

    keyboard_subscribe = InlineKeyboardMarkup(inline_keyboard=keyboard)

    if keyboard:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        await message.answer('–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!',
                             reply_markup=keyboard_subscribe)
    else:
        await message.answer('üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! üåü –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üòä \n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞ –∏ —É–¥–æ–±–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /help. üìö\n\n–ê –ø–æ–∫–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∏ —É–±–µ–¥–∏—Ç—å—Å—è, –∫–∞–∫ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –≤–∞—à—É –∂–∏–∑–Ω—å –ø—Ä–æ—â–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ! üöÄ\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! üí¨‚ú®',
                             reply_markup=make_row_keyboards(keyboard_main))


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()

    groups = load_groups()
    a = user_exists(message.from_user.id)

    if not a:
        write_user(message.from_user.username, message.from_user.full_name, message.from_user.first_name, message.from_user.last_name, message.from_user.id)
        await handle_subscription_check(message, groups)

    else:
        await handle_subscription_check(message, groups)

#
# @router.callback_query(F.data == 'more_stop')
# async def more_send_stop(callback: CallbackQuery, state: FSMContext):
#     await state.clear()
#     list_admins = get_admin_list()
#     if callback.from_user.id in list_admins:
#         await callback.message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! –£–¥–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –Ω–∞—à –±–æ—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /help.\n\n–ê –ø–æ–∫–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.', reply_markup=make_row_inline_keyboards(keyboard_main_admin))
#     else:
#         await callback.message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! –£–¥–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –Ω–∞—à –±–æ—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /help.\n\n–ê –ø–æ–∫–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.', reply_markup=make_row_inline_keyboards(keyboard_main))
#















# @router.callback_query(F.data == 'check_subscribes')
# async def check_subscribes(callback_query: CallbackQuery):
#     user_id = callback_query.from_user.id
#     not_subscribed_channels = []
#     groups = load_from_json()
#     try:
#         for i in groups:
#             member = await callback_query.bot.get_chat_member(chat_id=f'@{i["username"]}', user_id=user_id)
#             if member.status not in ['member', 'creator', 'administrator']:
#                 not_subscribed_channels.append(i["username"])
#
#         if not_subscribed_channels:
#             # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#             keyboard = [[InlineKeyboardButton(text=f'{channel}', url=f'https://t.me/{channel}') for channel in not_subscribed_channels]]
#             # keyboard.append([InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_subscribes')])
#             keyboard_subscribe = InlineKeyboardMarkup(inline_keyboard=keyboard)
#
#             await callback_query.message.answer('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã ;', reply_markup=keyboard_subscribe)
#         else:
#             await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é', reply_markup=keyboard_main)
#
#     except Exception as e:
#         print(f"Error checking subscriptions: {e}")
#         await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫.")
#
#
#
#
#
