from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram import Router
from aiogram.fsm.context import FSMContext

from config.settings import ADMIN
from keyboard.keyboard import *
from database.crud_sqlalchemy import write_user, get_admin_list, load_groups, user_exists, add_new_user_vip_panel
from keyboard.keyboard_builder import make_row_keyboards

router = Router()


async def handle_subscription_check(message: Message, groups):
    keyboard = []
    not_subscribed_channels = []

    list_admins = await get_admin_list()

    if message.from_user.id in list_admins:
        await message.answer(
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üåü\n\n"
            "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ! üòä\n\n"
            "üöÄ –ß—Ç–æ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
            "‚Ä¢ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã ‚Äî /help\n"
            "‚Ä¢ –í–∏–ø-—Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî /vip\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî /support\n\n"
            "üí° –°–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –æ–Ω–∞ –ø–æ–∫–∞–∂–µ—Ç –≥–ª–∞–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
            f"–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã ‚Üí {ADMIN}\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! ‚ú®",
            reply_markup=make_row_keyboards(keyboard_main_admin)
        )
        return

    for i in groups:
        member = await message.bot.get_chat_member(chat_id=f'@{i["username"]}', user_id=message.from_user.id)
        if member.status not in ['member', 'creator', 'administrator']:
            keyboard.append([InlineKeyboardButton(text=f'{i["name"]}', url=f'https://t.me/{i["username"]}')])
            not_subscribed_channels.append(i)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    # if not_subscribed_channels:
    #     keyboard.append([InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_subscribes')])

    keyboard_subscribe = InlineKeyboardMarkup(inline_keyboard=keyboard)

    if keyboard:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        await message.answer('–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!',
                             reply_markup=keyboard_subscribe)

    else:
        await message.answer(
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üåü\n\n"
            "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ! üòä\n\n"
            "üöÄ –ß—Ç–æ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
            "‚Ä¢ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã ‚Äî /help\n"
            "‚Ä¢ –í–∏–ø-—Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî /vip\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî /support\n\n"
            "üéÅ –î–ª—è –≤–∞—Å: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –í–∏–ø-–ø–∞–Ω–µ–ª–∏!\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ premium-—Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî /vip\n\n"
            "üí° –°–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –æ–Ω–∞ –ø–æ–∫–∞–∂–µ—Ç –≥–ª–∞–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
            f"–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã ‚Üí {ADMIN}\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! ‚ú®",
            reply_markup=make_row_keyboards(keyboard_main)
        )


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()

    groups = await load_groups()
    a = await user_exists(message.from_user.id)

    if not a:
        information_player_added_vip = {
            "telegram_id": message.from_user.id,
            "name": message.from_user.username,
            "number_of_days": 3,  # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            "status_vip": "–°—Ç–∞–Ω–¥–∞—Ä—Ç"
        }

        await add_new_user_vip_panel(information_player_added_vip)
        await write_user(message.from_user.username, message.from_user.full_name, message.from_user.first_name, message.from_user.last_name, message.from_user.id)
        await handle_subscription_check(message, groups)

    else:
        await handle_subscription_check(message, groups)

# @router.callback_query(F.data == 'check_subscribes')
# async def check_subscribes(callback_query: CallbackQuery):
#     user_id = callback_query.from_user.id
#     not_subscribed_channels = []
#     groups = load_from_json()
#     try:
#         for i in groups:
#             member = await callback_query.bot.get_chat_member(chat_id=f'@{i["username"]}', user_id=user_id)
#             if member.status not in ['member', 'creator', 'administrator']:
#                 not_subscribed_channels.append(i["username"])
#
#         if not_subscribed_channels:
#             # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#             keyboard = [[InlineKeyboardButton(text=f'{channel}', url=f'https://t.me/{channel}') for channel in not_subscribed_channels]]
#             # keyboard.append([InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_subscribes')])
#             keyboard_subscribe = InlineKeyboardMarkup(inline_keyboard=keyboard)
#
#             await callback_query.message.answer('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã ;', reply_markup=keyboard_subscribe)
#         else:
#             await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é', reply_markup=keyboard_main)
#
#     except Exception as e:
#         print(f"Error checking subscriptions: {e}")
#         await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫.")
#
#
#
#
#
