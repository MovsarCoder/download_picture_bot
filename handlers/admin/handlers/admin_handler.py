from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from keyboard.keyboard import *
from States.state import *
from database.crud import *
from keyboard.keyboard_builder import make_row_inline_keyboards

router = Router()


@router.message(Command('admin_panel'))
@router.message(F.text == '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º')
async def cmd_admin(callback_or_message: CallbackQuery | Message, state: FSMContext):
    await state.clear()
    admin_users_list = get_admin_list()
    if callback_or_message.from_user.id in admin_users_list:
        if isinstance(callback_or_message, CallbackQuery):
            await callback_or_message.message.answer('‚ùï–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=make_row_inline_keyboards(admin_panel_keyboard))
        elif isinstance(callback_or_message, Message):
            await callback_or_message.answer('‚ùï–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=make_row_inline_keyboards(admin_panel_keyboard))

    else:
        await callback_or_message.answer(
            f'‚ö†Ô∏è{callback_or_message.from_user.full_name}({callback_or_message.from_user.id}) –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Admin —Ñ—É–Ω–∫—Ü–∏—è–º –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞! –¢–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å Admin!')


@router.callback_query(F.data == 'new_admin_data')
async def new_admin_user_func(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('üëÄ–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –∞–¥–º–∏–Ω', reply_markup=make_row_inline_keyboards(back_keyboard))
    await state.set_state(AdminState.new_admin)


@router.message(AdminState.new_admin)
async def add_admin_id(message: Message, state: FSMContext):
    await state.update_data(id=message.text)
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if add_admin(message.text):
            await message.answer(f'‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω.', reply_markup=make_row_inline_keyboards(admin_panel_keyboard))
            await state.clear()
    # –ï—Å—Ç—å —Ç–∞–∫–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!
    except Exception as e:
        await message.answer(f'‚ùå–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: {e}', reply_markup=make_row_inline_keyboards(admin_panel_keyboard))


@router.callback_query(F.data == 'remove_admin_list_data')
async def remove_admin_func(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.answer('üëÄ–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', reply_markup=make_row_inline_keyboards(back_keyboard))
    await state.set_state(AdminState.remove_admin)


@router.message(AdminState.remove_admin)
async def remove_admin_func(message: Message, state: FSMContext):
    try:
        remove_admin(message.text)
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        await message.answer(f'‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text} –±—ã–ª —É–¥–∞–ª–µ–Ω!', reply_markup=make_row_inline_keyboards(admin_panel_keyboard))
        await state.clear()
    except ValueError as e:
        await message.answer(f'‚ùå–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: {e}', reply_markup=make_row_inline_keyboards(admin_panel_keyboard))


@router.callback_query(F.data == 'add_new_group_username_data')
async def add_new_group_username_db(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è @)!',
                                  reply_markup=make_row_inline_keyboards(back_keyboard))
    await state.set_state(AdminState.add_new_group_username)


@router.message(AdminState.add_new_group_username)
async def fsm_add_new_group_username(message: Message, state: FSMContext):
    await message.answer(f'üëÄ–•–æ—Ä–æ—à–æ! Username: {message.text}; –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ!')
    await state.update_data(add_new_group_username=message.text)
    await state.set_state(AdminState.add_new_group_name)


@router.message(AdminState.add_new_group_name)
async def fsm_add_new_group_name(message: Message, state: FSMContext):
    await state.update_data(add_new_group_name=message.text)
    information_group = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
    group_data = {
        'username': information_group['add_new_group_username'],
        'name': information_group['add_new_group_name']
    }

    # –ï—Å–ª–∏ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º Username –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–≤–æ–¥–∏—Ç—Å—è –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    if not add_group(group_data):
        await message.answer(f'‚ö†Ô∏è–ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {group_data["username"]}', reply_markup=make_row_inline_keyboards(admin_panel_keyboard))
        return False

    # –ï—Å–ª–∏ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ –∏ Username —Å–≤–æ–±–æ–¥–µ–Ω, –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è.
    await message.answer(f'‚úÖ–û—Ç–ª–∏—á–Ω–æ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:\nUsername: {group_data["username"]}\nName: {group_data["name"]}', reply_markup=make_row_inline_keyboards(admin_panel_keyboard))
    await state.clear()


@router.callback_query(F.data == 'delete_group_data')
async def remove_group_db_func(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.edit_text('Send username in the remove group/chanel (dont use "@")',
                                     reply_markup=make_row_inline_keyboards(back_keyboard))
    await state.set_state(AdminState.delete_group)


@router.message(AdminState.delete_group)
async def fsm_remove_group_db(message: Message, state: FSMContext):
    try:
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ª–æ–≤–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_text = message.text
        # –ï—Å–ª–∏ —Å –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Username –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –æ–Ω–∞ —É–¥–∞–ª–∏—Ç—Å—è.
        remove_func = remove_group(message_text)
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è remove_func –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True - –≥—Ä—É–ø–ø–∞ —É–¥–∞–ª—è–µ—Ç—Å—è –∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        if remove_func:
            await message.answer(f'‚úÖ–ì—Ä—É–ø–ø–∞ —Å Username: {message_text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!', reply_markup=make_row_inline_keyboards(admin_panel_keyboard))
            await state.clear()
        # –ï—Å–ª–∏ —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç.
        else:
            await message.answer('‚ö†Ô∏è–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É —Å —Ç–∞–∫–∏–º Username!', reply_markup=make_row_inline_keyboards(admin_panel_keyboard))

    except KeyError as e:
        await message.answer(f'‚ùå–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ 3453-234567 - {e}!')


@router.callback_query(F.data == 'list_group_data')
async def group_list_db(callback: CallbackQuery):
    await callback.answer('')
    groups = load_groups()
    keyboard = []

    # –µ—Å–ª–∏ –≤ JSON-—Ñ–∞–π–ª–µ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, –≤—ã–≤–µ–¥–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not groups:
        await callback.message.answer("‚ö†Ô∏è–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.", reply_markup=make_row_inline_keyboards(admin_panel_keyboard))
        return
    # –µ—Å–ª–∏ –≤ JSON-—Ñ–∞–π–ª–µ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ –∏–∑ –Ω–µ–µ —Å–æ–∑–¥–∞—Å—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    for group in groups:
        keyboard.append([InlineKeyboardButton(text=f'{group["name"]}', url=f'https://t.me/{group["username"]}')])

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    keyboard.append([InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='back_data2')])
    keyboard_list = InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    await callback.message.edit_text('üìã–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:', reply_markup=keyboard_list)


@router.callback_query(F.data == 'add_new_user_vip_panel')
async def new_user_vip_panel(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º–º ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ', reply_markup=make_row_inline_keyboards(back_keyboard))
    await state.set_state(AddedVipPanel.get_id)


@router.message(AddedVipPanel.get_id)
async def get_telegram_id_vip_panel(message: Message, state: FSMContext):
    await state.update_data(add_vip_panel_id=message.text)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—è: ')
    await state.set_state(AddedVipPanel.get_name)


@router.message(AddedVipPanel.get_name)
async def get_name_vip_panel(message: Message, state: FSMContext):
    await state.update_data(add_vip_panel_name=message.text)
    data = await state.get_data()
    vip_panel_information = {
        'telegram_id': data['add_vip_panel_id'],
        'name': data['add_vip_panel_name']
    }

    if add_new_user_vip_panel(vip_panel_information):
        await message.answer('‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=make_row_inline_keyboards(admin_panel_keyboard))
        await state.clear()

    else:
        await message.answer('‚ö†Ô∏è–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!', reply_markup=make_row_inline_keyboards(admin_panel_keyboard))
        await state.clear()
        
        
@router.callback_query(F.data == 'delete_user_with_vip_panel')
async def delete_user_vip_panel(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    await state.set_state(DeleteVipPanel.get_id)


@router.message(DeleteVipPanel.get_id)
async def delete_user_vip_panel_fsm(message: Message, state: FSMContext):
    user_get_text = message.text
    user_name = ''

    data = {
        'telegram_id': user_get_text,
        'name': user_name
    }

    if delete_users_with_vip_panel_functions(data):
        await message.answer('‚úÖ–ß–µ–ª–æ–≤–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ Vip –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!', reply_markup=make_row_inline_keyboards(admin_panel_keyboard))
        await state.clear()
    else:
        await message.answer('‚ö†Ô∏è–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ Vip –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!', reply_markup=make_row_inline_keyboards(admin_panel_keyboard))
        await state.clear()

@router.callback_query(F.data == 'back_data2')
async def back_func_2(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer('‚ùï–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', show_alert=True, reply_markup=make_row_inline_keyboards(admin_panel_keyboard))

#
# @router.callback_query(F.data == 'back_data')
# async def back_func(callback: CallbackQuery, state: FSMContext):
#     await state.clear()
#     await callback.message.answer('‚ùï–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', show_alert=True, reply_markup=make_row_inline_keyboards(keyboard_main_admin))
